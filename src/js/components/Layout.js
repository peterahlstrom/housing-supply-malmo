/**
 * Applikation för bostadsproduktionsplanering.
 * Visar och redigerar data från tabeller i Oracle-databas via Python.
 * 
 * Peter Ahlström 2016
 */

import React from 'react';
import Header from './Header';
import Admin from './Admin';
import $ from 'jquery';
import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';
import { Tabs, Tab, TabList, TabPanel} from 'react-tabs';
import Slider from 'rc-slider';

export default class Layout extends React.Component {
	
	constructor() {
		super()

		// Set initial state.
		this.state = {
			data: [],								//Array with data from get_all.py
			listItems: {plan_person_list:[]},		//Arrays with items for dropdown menus in table; ex. Projektskede
			editable: true,							//Is table editable? Changed with editableBtn
			editableBtn: {							//Button for toggle editable
				btnClass: 'btn btn-warning',
				labelClass: 'fa fa-lock'
			},
			columnRangeVisible: {min: 2016, max:2018},	//Startrange for visible data year columns
			bostadColumns: [],							//Array of TableHeaderColumn components. Generated by this.generateColumns()
			key: 1,										//Tab id
			minYear: 2016,								//Data tab slider min value. Set by this.parseBostad.
			maxYear: 2030,								//Data tab slider max value. Set by this.parseBostad.
			sliderMarks: {},							//Marks on slider. Set by this.parseBostad
			defaultSliderValue: [2016, 2018],			//Slider default min max values.
			showAlert: {
				show: true,
				message: 'Kunde inte skriva till databasen.',
			}
		}

		// Fetch data and update states.
		this.getData();
		this.getListItems();

	}


	// Fetch data from database and store in state.
	getData() {
		const self = this;
		const url = config.get_url;

		$.ajax({
			url: url,
			success: function(resp){
				let bostad = self.parseBostad(resp);
				let data = self.sumBostadColumns(resp);
				self.setState({
						data: data,
						bostadColumns: bostad.columns,
						minYear: bostad.minYear,
						maxYear: bostad.maxYear,
						sliderMarks: bostad.sliderMarks, 
					});
		    },
		    error: function(status, error) {
		    	console.error(status, error);
		    }
		});
	}

	// Fetch items arrays for dropdown menus
	getListItems() {
		const self = this;
		const url = config.get_items_url;

		$.ajax({
			url: url,
			success: function(resp){
				self.setState({
						listItems: resp,
					});
		    },
		    error: function(status, error) {
		    	console.error(status, error);
		    }
		});
	}

	insertRowInDatabase(row) {
		const self = this;
		const url = config.insert_url;

		$.ajax({
			url: url,
			type: 'POST',
			data: JSON.stringify(row),
			contentType: 'application/json; charset=utf-8',
			success: function(resp){
				console.log('insert row success')
				console.log(resp);
				self.getData();
		    },
		    error: function(status, error) {
		    	console.error(status, error);
		    }
		});
	}

	deleteRowInDatabase(id) {
		const self = this;
		const url = config.delete_url;
		const postData = {id: id[0]};

		$.ajax({
			url: url,
			type: 'POST',
			data: JSON.stringify(postData),
			contentType: 'application/json; charset=utf-8',
			success: function(resp){
				console.log('delete row success')
				console.log(resp);
				self.getData();
		    },
		    error: function(status, error) {
		    	console.error(status, error);
		    }
		});
	}

	editProjektDataInDatabase(row) {
		const self = this;
		const url = config.edit_projekt_url;

		$.ajax({
			url: url,
			type: 'POST',
			data: JSON.stringify(row),
			contentType: 'application/json; charset=utf-8',
			success: function(resp){
				console.log('edit projekt success')
				console.log(resp);
				// self.getData();
		    },
		    error: function(status, error) {
		    	console.error(status, error);
		    }
		});
	}

	editBostadDataInDatabase(row, cellName, cellValue) {
		this.setState({
			data: this.sumBostadColumns(this.state.data)
		});

		const self = this;
		const url = config.edit_bostad_url;

		const postData = {id: row.id, column: cellName, value: cellValue};

		$.ajax({
			url: url,
			type: 'POST',
			data: JSON.stringify(postData),
			contentType: 'application/json; charset=utf-8',
			success: function(resp){
				console.log('edit bostad success')
				console.log(resp);
				// self.getData();
		    },
		    error: function(status, error) {
		    	console.error(status, error);
		    }
		});
	}


	// Add summed values to data array.
	sumBostadColumns(data) {
		let arr = data
		for (let row of arr) {
			row['sumStart'] = 0;
			row['sumTilldelat'] = 0;
			row['sumMkb'] = 0;
			row['year'] = 0;

			for (let key of Object.keys(row)) {
				let key_val = key.substring(5);
				let value = (row[key] == ' ') ?  0 : parseInt(row[key]);

				switch (key_val) {
					case 'start':
						row['sumStart'] += value;
						break;
					case 'tilldelat':
						row['sumTilldelat'] += value;
						break;
					case 'mkb':
						row['sumMkb'] += value;
						break;
					default:
						break;
				}
			}
		}
		return arr;
	}

	// Toggle editabled state for table. Triggered by click on editableBtn.
	handleEditState() {
		let editableState = !this.state.editable;
		this.setState({
			editable: editableState,
			editableBtn: {
				btnClass: (editableState) ? 'btn btn-success' : 'btn btn-warning',
				labelClass: (editableState) ? 'fa fa-unlock' : 'fa fa-lock'
			}
		});
	}

	// Set range of visible columns in data tab view. Triggered after slider change.
	updateSliderRange(value) {
		this.setState({
			columnRangeVisible: {
				min: value[0],
				max: value[1],
			},
			defaultSliderValue: value,
		});
	}

	// Takes data array as input and return new states for a setState action.
	// Main function is to generate columns heads for the bostad data columns.
	parseBostad(data) {
		let key_list = [];
		let min = 9999;
		let max = 0;
		let self = this;

		function trimHeader(s) {
			let l = s.split('_')
			return `${l[0]} ${l[1]}`
		}

		// Makes sure the columns come in the specified order, not alphabetical or other.
		function customSort(key_list) {
			let out = [];
			let years = [];
			let categorys = ['start', 'tilldelat', 'mkb'];
			key_list.sort()

			//create array with the year values. Data array typical contains three of each year.
		 	for (let item of key_list) {
		 		let year = item.split('_')[0];
		 		years.push(year);
		 	}

		 	//add category prefixes for each array item, assuming three items per year.
		 	let i = 0;
		 	let columns = years.map((year) => {
		 		out.push(`${year}_${categorys[i]}`);
		 		i++;
		 		if (i > 2) {
		 			i = 0;
		 		}
		 	});

		 	return out;
		} 

		function generateSliderMarks(min, max){
			let marks = {}
			for (let i = min; i <= max; i++) {
				marks[i] = i;
			}
			return marks
		}

		//Generates column headers and setting min max values for slider.
		for (let row of data) {
			for (let key of Object.keys(row)) {
				let key_val = key.substring(0,4);

				if (key_val.match(/20\d{2}/)) {
					key_val = parseInt(key_val);
					if (key_val < min) { min = key_val };
					if (key_val > max) { max = key_val };
					if (key_list.indexOf(key) == -1) {
						key_list.push(key);
					}
				}
			}
			
		}
		key_list = customSort(key_list);

		return {
			columns: key_list, //array of strings; ex. '2016 start', to be used as column headers by this.generateColumns
			minYear: min,
			maxYear: max,
			sliderMarks: generateSliderMarks(min,max)
		};
	}

	// Generate TableHeaderColumn components from array of columns headers. Returning columns in range set by slider.
	generateColumns(){
			let key_list = this.state.bostadColumns;
			let self = this;
			function columnHidden(columnHeader) {
				const YEAR = parseInt(columnHeader.substring(0,4));
				const MIN = self.state.columnRangeVisible.min;
				const MAX = self.state.columnRangeVisible.max;

				if (YEAR <= MAX && YEAR >= MIN) { return false;}
				else return true;
			}

			let columns = key_list.map( (key) => {
						return [<TableHeaderColumn dataField={key} key={key} dataAlign="left" hidden={columnHidden(key)} dataSort={true} class="text-capitalize">{this.paragraphy(key, '_')}</TableHeaderColumn>]
					});

			return columns
		}

	// Split string and return div, for layout reasons.
	paragraphy(string, separator) {
		var parts = string.split(separator);
		for (var i = 1; i < parts.length; i += 2) {
		  parts[i] = <p>{parts[i]}</p>;
		}
		return <div>{parts}</div>;
	}

	render() {

		const PROJEKTSKEDEN = {
			// filterOptions: {
			// 	type: "SelectFilter",
			// 	options: {
			// 			'Pågående': 'Pågående',
			// 			'Etapp 1': 'Etapp 1',
			// 			'Etapp 2': 'Etapp 2',
			// 			'Etapp 3': 'Etapp 3',
			// 	}, 
			// 	placeholder: "Välj projektskede...",
			// },
			
			editOptions: {
					 type: 'select', 
					 options: { values: this.state.listItems.skede_projekt_list }
			
			}
		}

		const PLANSKEDEN = {
			// filterOptions: {
			// 	type: "SelectFilter",
			// 	options: {
			// 			'Ej påbörjad Dp': 'Ej påbörjad Dp',
			// 			'Ansökan': 'Ansökan',
			// 			'Anmäld': 'Anmäld',
			// 			'Samråd': 'Samråd',
			// 			'Granskning': 'Granskning',
			// 			'Antagen': 'Antagen'
			// 	}, 
			// 	placeholder: "Välj planskede...",
			// },
			
			editOptions: {
					 type: 'select', 
					 options: { values: this.state.listItems.skede_plan_list }
			
			}
		}

		const HANDLAGGARE = {
			editOptions: {
					 type: 'select', 
					 options: { values: [' '].concat(this.state.listItems.plan_person_list.map( (p) => p.namn)) }
			
			}
		}

		const cellEditProjektProp = {
			mode: "click",
			blurToSave: true,
			afterSaveCell: this.editProjektDataInDatabase.bind(this)
		}

		const cellEditDataProp = {
			mode: "click",
			blurToSave: true,
			afterSaveCell: this.editBostadDataInDatabase.bind(this)
		}

		const selectRowProp = {
		  mode: "radio", 
		  clickToSelect: false
		};

		const tableOptions = {
			sortName: 'id',
			sortOrder: 'asc',
			deleteText: 'Ta bort',
			insertText: 'Lägg till',
			searchPlaceholder: 'Sök...',
            exportCSVText: 'Exportera CSV',
            saveText: 'Spara',
            closeText: 'Stäng',
            afterInsertRow: this.insertRowInDatabase.bind(this),
            afterDeleteRow: this.deleteRowInDatabase.bind(this),
		}


		return (
			<div>
				<Header header="Bostadsproduktion" subHeader="möjliga byggstarter, kommunal mark"/>

				<button id="editableBtn" class={this.state.editableBtn.btnClass} onClick={this.handleEditState.bind(this)} ><i class={this.state.editableBtn.labelClass}></i></button>

				<Tabs>
					<TabList>
						<Tab>Projekt</Tab>
						<Tab>Data</Tab>
						<Tab class="floatRight" disabled={!this.state.editable}>Admin</Tab>
					</TabList>

			        	<TabPanel id="projekt">
						  <BootstrapTable data={this.state.data} 
						     	ref='table1' 
						     	height={(window.innerHeight - 200).toString()}
						     	insertRow={true} 
						     	deleteRow={true}
						     	deleteBtnDisabled={!this.state.editable}
						     	selectRow={selectRowProp} 
						     	striped={true} 
						     	hover={true} 
						     	search={true} 
						     	clearSearch={true}
						     	cellEdit={(this.state.editable) ? cellEditProjektProp : {}} 
						     	condensed={false}
						     	key="id"
						     	options={tableOptions} >
							       <TableHeaderColumn dataField="id" autoValue={ true }  width="50" isKey={true} dataSort={false} hidden={true} >Id</TableHeaderColumn>
							       <TableHeaderColumn dataField="namn" dataAlign="left" dataSort={true} >Namn</TableHeaderColumn>
							       <TableHeaderColumn dataField="anteckning" dataSort={true}>Anteckning</TableHeaderColumn>
							       <TableHeaderColumn dataField="skede_projekt_text" dataSort={true} filter={false} editable={PROJEKTSKEDEN.editOptions} >Projektskede</TableHeaderColumn>
							       <TableHeaderColumn dataField="plan_person_text" dataSort={true} editable={HANDLAGGARE.editOptions} >Handläggare</TableHeaderColumn>
							       <TableHeaderColumn dataField="skede_plan_text" dataSort={true} filter={false} editable={PLANSKEDEN.editOptions}>Planskede</TableHeaderColumn>
							       <TableHeaderColumn dataField="detaljplan" width="170" dataSort={false}>Detaljplan</TableHeaderColumn>
							       <TableHeaderColumn dataField="sumStart" width="100" editable={false} dataAlign="left" dataSort={true} >{this.paragraphy('Totalt start', ' ')}</TableHeaderColumn>
							       <TableHeaderColumn dataField="sumTilldelat" width="100" editable={false} dataAlign="left" dataSort={true} >{this.paragraphy('Totalt tilldelat', ' ')}</TableHeaderColumn>
							       <TableHeaderColumn dataField="sumMkb" width="100" editable={false} dataAlign="left" dataSort={true} >{this.paragraphy('Totalt tilldelat MKB', ' ')}</TableHeaderColumn>
							      {/* <TableHeaderColumn dataField="year" width="100" editable={true} hidden={true} dataAlign="left" dataSort={true} >År</TableHeaderColumn> */}
						    </BootstrapTable>
	  		       		</TabPanel>
			
				        <TabPanel id="data"> 
			          		<div id="slider">
			          			<Slider min={this.state.minYear} max={this.state.maxYear} range marks={this.state.sliderMarks} step={1} defaultValue={this.state.defaultSliderValue} onAfterChange={this.updateSliderRange.bind(this)} />
			  				</div> 

	  				        <BootstrapTable data={this.state.data} 
	  							insertRow={false} 
	  							height={(window.innerHeight - 200).toString()} 
	  							ref='table2' 
	  							striped={true} 
	  							hover={true} 
	  							search={false} 
	  							cellEdit={(this.state.editable) ? cellEditDataProp : {}}
	  							condensed={true}
	  							key="id" >
	  								<TableHeaderColumn dataField="id" width="50" isKey={true} dataSort={false} hidden={true} >Id</TableHeaderColumn>
	  						  	<TableHeaderColumn dataField="namn" width="300" dataAlign="left" dataSort={true} >Namn</TableHeaderColumn>
	  						  	{this.generateColumns()}
	  						  	<TableHeaderColumn dataField="sumStart" width="100" editable={false} dataAlign="left" dataSort={true} >{this.paragraphy('Totalt start', ' ')}</TableHeaderColumn>
	  						   <TableHeaderColumn dataField="sumTilldelat" width="100" editable={false} dataAlign="left" dataSort={true} >{this.paragraphy('Totalt tilldelat', ' ')}</TableHeaderColumn>
	  						   <TableHeaderColumn dataField="sumMkb" width="100" editable={false} dataAlign="left" dataSort={true} >{this.paragraphy('Totalt tilldelat MKB', ' ')}</TableHeaderColumn>
	  						</BootstrapTable>
				        </TabPanel>

				        <TabPanel id="admin"> 
				          	<Admin data={this.state.listItems.plan_person_list} getListItems={this.getListItems.bind(this)} />
				        </TabPanel>
				</Tabs>   
			</div>
		);

	}
}